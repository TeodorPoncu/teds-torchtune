# Config for multi-device full finetuning in full_finetune_distributed.py
# using a Llama2 7B model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download meta-llama/Llama-2-7b-hf --output-dir /tmp/Llama-2-7b-hf --hf-token <HF_TOKEN>
#
# To launch on 4 devices, run the following command from root:
#   tune run --nnodes 1 --nproc_per_node 4 full_finetune_distributed --config llama2/7B_full
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run --nnodes 1 --nproc_per_node 4 full_finetune_distributed --config llama2/7B_full checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works best when the model is being fine-tuned on 2+ GPUs.
# Single device full finetuning requires more memory optimizations. It's
# best to use 7B_full_single_device.yaml for those cases

PROJECT_PATH: /root/ted/teds-torchtune

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama2.llama2_tokenizer
  path: ${PROJECT_PATH}/models/Llama-2-7B/tokenizer.model
  max_seq_len: 2048

# Dataset
train_dataset:
  - _component_: torchtune.datasets.text_completion_dataset
    source: json
    data_files: ${PROJECT_PATH}/data/PIT/wiki2023_film_train/doc.jsonl
    column: text
    split: train
    packed: True
    max_seq_len: 2048


  - _component_: torchtune.datasets.text_completion_dataset
    source: json
    data_files: ${PROJECT_PATH}/data/PIT/wiki2023_film_test/doc.jsonl
    column: text
    split: train
    packed: True
    max_seq_len: 2048


  - _component_: torchtune.datasets.instruct_dataset
    source: json
    data_files: ${PROJECT_PATH}/data/PIT/wiki2023_film_train/qa.jsonl
    split: train
    column_map:
      input: question
      output: answer
    packed: True


test_dataset:
  wiki_film:
    _component_: torchtune.datasets.instruct_dataset
    source: json
    data_files: ${PROJECT_PATH}/data/PIT/wiki2023_film_test/qa.jsonl
    split: train
    column_map:
      input: question
      output: answer
    packed: True

seed: null
shuffle: True

# Model Arguments
model:
  _component_: torchtune.models.llama2.llama2_7b

checkpointer:
  _component_: torchtune.training.FullModelMetaCheckpointer
  checkpoint_dir: ${PROJECT_PATH}/models/Llama-2-7B
  checkpoint_files: [
    consolidated.00.pth
  ]
  recipe_checkpoint: null
  output_dir: ${PROJECT_PATH}/models/Llama-2-7B/checkpoints
  model_type: LLAMA2

resume_from_checkpoint: False

# Fine-tuning arguments
batch_size: 2
epochs: 5

# Optimizer and Scheduler
optimizer:
  _component_: torch.optim.AdamW
  weight_decay: 0.01
  lr: 2e-5
lr_scheduler:
  _component_: torchtune.modules.get_cosine_schedule_with_warmup
  num_warmup_steps: 200
clip_grad_norm: 1.0
loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss

max_steps_per_epoch: null
gradient_accumulation_steps: 4

# Training env
device: cuda

# Memory management
enable_activation_checkpointing: False
fsdp_reshard_after_forward: False
compile: True

# Reduced precision
dtype: bf16

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.WandBLogger
  project: pit-torchtune
  log_dir: ${output_dir}
  key: 0eb85af7bf226b1b74d6bca8e920c2e759b9675a
  mode: online
output_dir: .
log_every_n_steps: 1
log_peak_memory_stats: False
